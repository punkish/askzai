/* 
 * the html and body settings are important to make the footer 
 * stick to the bottom when the body content is less than the 
 * viewport height. See 
 * https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_cookbook/Sticky_footers
 */
html {
    height: 100%;
}
body {
    min-height: 100vh;
    padding: 0 !important;
    display: grid;
    grid-template-rows: auto 1fr auto;

    /* override uglyduck setting */
    max-width: 960px;
}
a,
a:visited{

    /* reset uglyduck setting for a and a:visited */
    color:blue;
}
a.backhome1,
a.backhome2 {
    text-decoration: none;
    border: 1px solid grey;
    padding: .1rem .5rem;
    border-radius: 5px;
    background-color: #f5f5f5;
    color: black;
    font-weight: 800;
}
a.backhome1:hover
a.backhome2:hover {
    background-color: grey;
    color: white;
}
header {
    text-align: center;
    height: 7rem;
    padding-top: 2.5rem;
}
header img {
    cursor: pointer;
}
header nav {
    text-align: center;
    visibility: hidden;
    margin-top: -20px;
}
header nav ul {

    /* left padding ensures that "about" is aligned with the logo above */
    padding-left: 17px;
}
header nav ul li {
    display: inline;
    list-style: none;
    font-family: sans-serif;
    margin-right: 1rem;
}
footer {
    text-align: center;
    font-family: sans-serif;
    font-size: 80%;
}

/* obscure hides the input element so #q_shadow stands out alone */
.obscure {
    opacity: 0;
    z-index: -1;
}

/* hidden hides the sections defined by the route */
.hidden {
    display: none;
}

.warning {
    color: orange;
}
form {
    --form-width: 280px;
    --button-width: 50px;
    --button-height: 36px;
    --input-width: calc( var(--form-width) - var(--button-width));
}
@media (min-width: 550px) {
    form {
        --form-width: 100%;
    }
}
#q_container {
    width: var(--input-width);
    position: relative;
    border: 1px solid lightgrey;
    height: var(--button-height);
    padding: 2px;
    border-radius: 20px 0 0 20px;
}
#q_shadow {
    color: lightgrey;
    width: var(--input-width);
    min-height: var(--button-height);
    height: 30px;
    line-height: 2.1rem;
}
#q {
    width: var(--input-width);
    border: none;
    height: 32px;
    padding: 0;
}
#q_shadow,
#q {
    position: absolute;
    top: 1px;
    left: 15px;
    font-family: sans-serif;
    font-size: 1rem;
}
#q:focus {
    outline: none;
}
#reset {
    position: absolute;
    width: 30px;
    height: 30px;
    left: calc(var(--input-width) + 15px);
    border: 3px double lightgrey;
    border-radius: 50%;
}
#reset:hover {
    background-color: red;
    color: white;
    cursor: pointer;
}

/* https://dev.to/dcodeyt/create-a-button-with-a-loading-spinner-in-html-css-1c0h */
.button--loading::after {
    content: "";
    position: absolute;
    width: 20px;
    height: 20px;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    background-color: lightgreen;
    border: 4px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: button-loading-spinner 1s ease infinite;
}
@keyframes button-loading-spinner {
    from {
        transform: rotate(0turn);
    }

    to {
        transform: rotate(1turn);
    }
}

#go {
    position: absolute;
    top: -1px;
    border: 1px solid lightgrey;
    border-radius: 0 20px 20px 0;
    width: var(--button-width);
    height: var(--button-height);
    left: calc(var(--input-width) + var(--button-width));
    cursor: pointer;
}
#go:hover {
    background-color: lightgreen;
}
.hl {
    color: green;
}
.res {
    color: green;
}
.message {
    margin: 0;
}
#answer {
    margin: 2rem 0;
}

.typewriter {
    overflow: hidden;
    white-space: nowrap;
    animation: typing 800ms steps(8, end);
  
    &::after {
      content: "";
      border-left: 2px solid #000;
      animation: blink 1s step-end infinite;
    }
}
@keyframes typing {
    from { width: 0; }
    to { width: 8ch; }
}
@keyframes blink {
    50% { opacity: 0; }
}

/* ----------------------------------------
 * https://gradienty.codes/animations
 * animation fade-in-normal
 * ----------------------------------------
 */
@keyframes fade-in-normal {0% { opacity: 0; } 100% { opacity: 1;} }

.fade-in-normal { 
    visibility: visible;
    animation: fade-in-normal 1s ease-in 0s 1 normal none; 
}

.column {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: 0 auto;
}
/* grid for figures */
.columns-250 {
    --column-count: 1;
    --column-gap: 30px;
    --image-size: 300px;
    --columns-width: calc( var(--image-size) * var(--column-count) );
    --gaps-width: calc( (var(--column-count) - 1) * var(--column-gap) );
    --grid-width: calc( var(--columns-width) + var(--gaps-width) );

    width: var(--grid-width);
    max-width: var(--grid-width);
    margin: 0 auto;

    column-count: var(--column-count);
    -webkit-column-count: var(--column-count);
    -moz-column-count: var(--column-count);
    
    column-gap: var(--column-gap);
    -moz-column-gap: var(--column-gap);
    -webkit-column-gap: var(--column-gap);

    page-break-inside: avoid;
    break-inside: avoid;
    -webkit-column-break-inside: avoid;
}
/* Larger than phablet */
@media (min-width: 550px) {
    .columns-250 {
        --image-size: 300px;
        --column-count: 2 !important;
    }
}

/* Larger than tablet */
@media (min-width: 768px) {
    .columns-250 {
        --column-count: 3 !important;
    }
}

figure {
    position: relative;
    height: auto;
    border: 1px solid #444;
    margin: 0;
    padding: 0px;
    opacity: 1;
    text-align: center;
}
figure img.lazyloaded {
    width: 100%;
    max-width: 300px;
}
figure a:hover {
    background-color: unset;
    padding: unset;
    border: unset;
    border-radius: unset;
}
figure .reveal {
    background-color: white;
    color: grey;
    font-family: sans-serif;
    font-size: 8px;
    padding: 2px 4px;
    cursor: pointer;
    border: 1px solid grey;
    border-radius: 5px;
    text-align: center;
}
figure .reveal:hover {
    background-color: lightgrey;
    color: black;
}
figure.figure-250 { 
    width: var(--image-size); 
    margin: 0 auto 20px auto;
}

/* Larger than phablet */
@media (min-width: 550px) {
    figure.figure-250 { 
        margin: 0 auto 20px auto;
    }
}
figure {
    font-family: sans-serif;
    font-size: 12px;
    padding: 1rem;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    box-shadow: 1px 1px 10px 1px #dbd9d5;
    
    /* avoid figures splitting across columns */
    /* see https://stackoverflow.com/a/17415553/183692 */
    overflow: hidden; /* fix for Firefox */
    break-inside: avoid-column;
    -webkit-column-break-inside: avoid;
    page-break-inside: avoid;
    break-inside: avoid;
    -webkit-column-break-inside: avoid; 
}
figure.tb {
    padding: 1rem;
}
figcaption {
    font-family: helvetica,sans-serif;
    font-size: 10pt;
    text-align: left;
    cursor: pointer;
    line-height: 1.1rem;
    
}
figcaption div.closed {
    height: 0;
}
figcaption div.figTitle {
    font-weight: 800;
}
figcaption div.open {
    height: 100%;
}
figcaption h3 {
    line-height: 1.25rem;
}
figcaption details {
    border-radius: 4px;
    padding: 0.5em 0.5em 0;
}
figcaption details summary {
    font-weight: bold;
    margin: -0.5em -0.5em 0;
    padding: 0.5em;

    /******************************/
    /* limit length of summary    */
    /* https://btxx.org/posts/te/ */
    /******************************/
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
figcaption details[open] {
    padding: 0.5em;
    overflow: auto;
}
figcaption details[open] summary {
    border-bottom: 1px solid #aaa;
    margin-bottom: 0.5em;
    overflow: unset;
    white-space: unset;
}